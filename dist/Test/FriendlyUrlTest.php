<?php

namespace GodsDev\mycmsprojectnamespace\Test;

use GodsDev\mycmsprojectnamespace\FriendlyUrl;
use GodsDev\mycmsprojectnamespace\MyCMSProject;
use GodsDev\Tools\Tools;
use Tracy\Debugger;

require_once __DIR__ . '/../conf/config.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-30 at 20:49:16.
 */
class FriendlyUrlTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var MyCMSProject
     */
    protected $myCms;

    /**
     * @var Controller
     */
    protected $object;

    /** @var string */
    protected $language;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        global $backyardConf,
        $myCmsConf;
        Debugger::enable(Debugger::DEVELOPMENT, __DIR__ . '/../log');
        $backyard = new \GodsDev\Backyard\Backyard($backyardConf);
        $myCmsConf['logger'] = $backyard->BackyardError;
        $myCmsConf['dbms'] = new \GodsDev\MyCMS\LogMysqli(DB_HOST . ':' . DB_PORT, DB_USERNAME, DB_PASSWORD, DB_DATABASE, $myCmsConf['logger']); //@todo - use test db instead. Or use other TAB_PREFIX !

        $this->myCms = new MyCMSProject($myCmsConf);

        $_SESSION = []; //because $_SESSION is not defined in the PHPUnit mode
        $this->language = $this->myCms->getSessionLanguage([], [], false);
        //according to what is tested, change $this->myCms->context before invoking $this->object = new FriendlyUrl; within Test methods
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers GodsDev\mycmsprojectnamespace\Controller::controller
     */
    public function testDetermineTemplateParametric()
    {
        $determineTemplateOptions = ['REQUEST_URI' => '/?product&id=1'];
        $friendlyUrlOptions = [
            'get' => ['product' => '', 'id' => '1'],
            'language' => 'cs', // in production taken from $_SESSION['language']
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        if (FORCE_301) {
            $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
            $this->assertArrayHasKey('httpCode', $templateDetermined, 'Determine template ' . $message);
            $this->assertEquals(301, $templateDetermined['httpCode'], 'non-301 httpCode field in ' . print_r($templateDetermined, true));
            $this->assertArrayHasKey('redir', $templateDetermined, 'Determine template ' . $message);
            $this->assertStringEndsWith('/alfa', $templateDetermined['redir'], 'redir field MUST end with /alfa');
        } else {
            $this->assertEquals('product', $templateDetermined, $message);
        }

        $determineTemplateOptions = ['REQUEST_URI' => '/?product&id=2'];
        $friendlyUrlOptions = [
            'get' => ['product' => '', 'id' => '2'],
            'language' => 'cs', // in production taken from $_SESSION['language']
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        if (FORCE_301) {
            $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
            $this->assertArrayHasKey('httpCode', $templateDetermined, 'Determine template ' . $message);
            $this->assertEquals(301, $templateDetermined['httpCode'], 'non-301 httpCode field in ' . print_r($templateDetermined, true));
            $this->assertArrayHasKey('redir', $templateDetermined, 'Determine template ' . $message);
            $this->assertStringEndsWith('/beta', $templateDetermined['redir'], 'redir field MUST end with /beta');
        } else {
            $this->assertEquals('product', $templateDetermined, $message);
        }

        $determineTemplateOptions = ['REQUEST_URI' => '/?product&id=5'];
        $friendlyUrlOptions = [
            'get' => ['product' => '', 'id' => '5'],
            'language' => 'cs', // in production taken from $_SESSION['language']
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        $this->assertEquals('product', $templateDetermined, $message);

        // non-existent product
        $determineTemplateOptions = ['REQUEST_URI' => '/?product&id=15000'];
        $friendlyUrlOptions = [
            'get' => ['product' => '', 'id' => '15000'],
            'language' => 'cs',
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        if (FORCE_301) {
            $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
            $this->assertArrayHasKey('httpCode', $templateDetermined, 'Determine template ' . $message);
            $this->assertEquals(301, $templateDetermined['httpCode'], 'non-301 httpCode field in ' . print_r($templateDetermined, true));
            $this->assertArrayHasKey('redir', $templateDetermined, 'Determine template ' . $message);
            $this->assertStringEndsWith('/404', $templateDetermined['redir'], 'redir field MUST end with /404');
        } else {
            $this->assertEquals('product', $templateDetermined, $message); // as to error404 it will change in Controller::prepareTemplate
        }

        $determineTemplateOptions = ['REQUEST_URI' => '/?category=1'];
        $friendlyUrlOptions = [
            'get' => ['category' => '1'],
            'language' => 'cs',
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        $this->assertEquals('category', $templateDetermined, $message);

        $determineTemplateOptions = ['REQUEST_URI' => '/?category'];
        $friendlyUrlOptions = [
            'get' => ['category' => ''],
            'language' => 'cs',
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        $this->assertEquals('category', $templateDetermined, $message);

        // non-existent category
        $determineTemplateOptions = ['REQUEST_URI' => '/?category=10000'];
        $friendlyUrlOptions = [
            'get' => ['category' => '10000'],
            'language' => 'cs',
        ];
        $this->object = new FriendlyUrl($this->myCms, $friendlyUrlOptions);
        $templateDetermined = $this->object->determineTemplate($determineTemplateOptions);
        $message = 'Failed for request URI ' . $determineTemplateOptions['REQUEST_URI'] . (Tools::nonempty($friendlyUrlOptions['get']) ? (' get:' . http_build_query($friendlyUrlOptions['get'])) : '') . (Tools::nonempty($friendlyUrlOptions['session']) ? (' session:' . http_build_query($friendlyUrlOptions['session'])) : '') . ' templateDetermined: ' . print_r($templateDetermined, true);
        if (FORCE_301) {
            $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
            $this->assertArrayHasKey('httpCode', $templateDetermined, 'Determine template ' . $message);
            $this->assertEquals(301, $templateDetermined['httpCode'], 'non-301 httpCode field in ' . print_r($templateDetermined, true));
            $this->assertArrayHasKey('redir', $templateDetermined, 'Determine template ' . $message);
            $this->assertStringEndsWith('/404', $templateDetermined['redir'], 'redir field MUST end with /404');
        } else {
            $this->assertEquals('category', $templateDetermined, $message); // as to error404 it will change in Controller::prepareTemplate
        }
    }

    /**
     * @covers GodsDev\mycmsprojectnamespace\Controller::controller
     */
    public function testControllerRedirectorVsFriendlyURL()
    {
        $requestUri = '/takova-stranka-neni';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, [
            'get' => [],
            'requestUri' => $requestUri,
//            "session" => $_SESSION,
//            'sectionStyles' => ['red'],
        ]);
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertEquals('error404', $templateDetermined, 'MUST return false: Determine template ' . $message);


        $requestUri = '/kariera';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
//            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertEquals('category', $templateDetermined, 'MUST return false: Determine template ' . $message);


        $requestUri = '/takovy-adresar-neni/odpovednost?product=3';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $applicationDir = pathinfo($_SERVER["SCRIPT_NAME"], PATHINFO_DIRNAME);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, 'Determine template ' . $message);
        $this->assertEquals(["redir" => $applicationDir . (FRIENDLY_URL ? '/mini-dc' : '/?product=3')], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);


        $requestUri = '/takovy-adresar-neni/odpovednost';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, 'Determine template ' . $message);
        $this->assertEquals(["redir" => $applicationDir . '/404?url=' . $requestUri], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);


        $requestUri = '/data-centers/dadas/dadsads';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, 'Determine template ' . $message);
        $this->assertEquals(["redir" => $applicationDir . '/404?url=' . $requestUri], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);


        $requestUri = '/xx/data-centers';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, 'Determine template ' . $message);
        $this->assertEquals(["redir" => $applicationDir . '/404?url=' . $requestUri], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);


        $requestUri = '/en/data-centers'; // Note: url_en=data-centers MUST be set
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri,
//            'verbose' => true,
        ]);
        $this->assertEquals('home', $templateDetermined, 'MUST return true: Determine template ' . $message);


        $requestUri = '/produkty-a-reseni/kariera'; //Note: to properly test /spolecnost/odpovednost (which MUST be defined in redirector table) the /odpovednost MUST be tested first.
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, $message);
        $this->assertEquals(["redir" => $applicationDir . '/kariera'], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);


        $requestUri = '/produkty-a-reseni/reseni/';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => [],
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, $message);
        $this->assertEquals(["redir" => $applicationDir . '/?portfolio'], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);


        $requestUri = '/en/operational-technologies?product=37';
        $message = "For request URI " . $requestUri;
        $this->object = new FriendlyUrl($this->myCms, array(
            "get" => array(
                "language" => "en",
                "operational-technologies" => "",
                "product" => "37",
            ),
            "language" => "en",
            "requestUri" => $requestUri,
            "session" => $_SESSION,
//            "sectionStyles" => array("red"),
        ));
        $templateDetermined = $this->object->determineTemplate([
            'PATH_HOME' => '0000000001',
            'REQUEST_URI' => $requestUri
        ]);
        $this->assertInternalType('array', $templateDetermined, 'MUST return array: Determine template ' . $message . ' but template=' . $this->myCms->template);
        $this->assertArrayHasKey("redir", $templateDetermined, $message);
        $this->assertEquals(["redir" => $applicationDir . '/en/operational-technologies'], $templateDetermined, 'MUST return redirect array: Determine template ' . $message . ' but template=' . $this->myCms->template);
    }

    /**
     * @covers GodsDev\mycmsprojectnamespace\FriendlyUrl::friendlyfyUrl
     */
    public function testFriendlyfyUrl()
    {
        if (!FRIENDLY_URL) {
            $this->markTestIncomplete(
                'This test may be performed only with FRIENDLY_URL === true.'
            );
            return null;
        }
        $this->object = new FriendlyUrl($this->myCms, []);

        $this->assertEquals('mobile-dc', $this->object->friendlyfyUrl('?product=4'));
        $this->assertEquals('404', $this->object->friendlyfyUrl('?product=3170'), 'Nonexistent product');
        $this->assertEquals('datova-centra', $this->object->friendlyfyUrl('?line=1'));
        $this->assertEquals('404', $this->object->friendlyfyUrl('?line=1456'), 'Nonexistent category');
    }

}
