<?php

namespace GodsDev\MYCMSPROJECTNAME;

use GodsDev\MYCMSPROJECTNAME\MyCMSProject;
use Tracy\Debugger;

require_once __DIR__ . '/../../conf/env_config.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-30 at 20:49:16.
 */
class ControllerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var MyCMS
     */
    protected $myCms;

    /**
     * @var Controller
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        global $backyardConf;
        Debugger::enable(Debugger::DEVELOPMENT, __DIR__ . '/../../log');
        $backyard = new \GodsDev\Backyard\Backyard($backyardConf);
        $mycmsOptions = array(
            'TRANSLATIONS' => array(
                'en' => 'English',
                'cn' => 'ä¸­æ–‡'
            ),
            'logger' => $backyard->BackyardError,
            'dbms' => new \GodsDev\Backyard\BackyardMysqli(DB_HOST . ":" . DB_PORT, DB_USERNAME, DB_PASSWORD, DB_DATABASE, $backyard->BackyardError), //@todo - use test db instead. Or use other TAB_PREFIX !
        );
        $this->myCms = new MyCMSProject($mycmsOptions);
        $_SESSION = array(
            'language' => $this->myCms->getSessionLanguage(array(), array(), false),
        ); //because $_SESSION is not defined in the PHPUnit mode
        //according to what you test, change $this->myCms->context before invoking $this->object = new Controller; within Test methods
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerNoContext()
    {
        $this->object = new Controller($this->myCms);
        $controller = $this->object->controller();
        $this->assertArraySubset(array("template" => "home", "context" => array()), $controller);
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerContext()
    {
        $this->myCms->context = array("1" => "2", "3" => "4", "c");
        $this->object = new Controller($this->myCms);
        $this->assertArraySubset(array("template" => "home", "context" => $this->myCms->context), $this->object->controller());
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerProduct()
    {
        $this->myCms->context = array("1" => "2", "3" => "4", "c");
        $this->object = new Controller($this->myCms, array(
            "get" => array(
                "product" => 5,
            ),
            "session" => $_SESSION,
            "sectionStyles" => array("red"),
        ));
        $controller = $this->object->controller();
        $this->assertArrayHasKey("template", $controller);
        $this->assertInternalType('string', $controller['template']);
        $this->assertEquals('product', $controller['template']);
        $this->assertArrayHasKey("context", $controller);
        $this->assertInternalType('array', $controller['context']);
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerLine()
    {
        $this->myCms->SETTINGS['PATH_HOME'] = '0000000001';
        $this->myCms->SETTINGS['PATH_CATEGORY'] = '0000000002';
        //or use the more generic statement below instead?
//        $this->myCMS->loadSettings(
//                'SELECT context FROM ' . TAB_PREFIX . 'content WHERE code="SETTINGS"', 'SELECT description_' . $_SESSION['language'] . ' FROM ' . TAB_PREFIX . 'content WHERE code="WEBSITE"'
//        );        
        $lineId = 1;
        $this->object = new Controller($this->myCms, array(
            "get" => array(
                "line" => $lineId,
            ),
            "session" => $_SESSION,
            "sectionStyles" => array("red"),
        ));
        $controller = $this->object->controller();
        $this->assertArrayHasKey("template", $controller);
        $this->assertInternalType('string', $controller['template']);
        $this->assertEquals('home', $controller['template']);
        $this->assertArrayHasKey("context", $controller);
        $this->assertInternalType('array', $controller['context']);
        $this->assertInternalType('string', $controller['context']['pageTitle']);
        $this->assertNotEquals(0, strlen($controller['context']['pageTitle']), 'Empty line page title');
        $this->assertEquals($lineId, $controller['context']['line']);
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerSearch()
    {
        $this->object = new Controller($this->myCms, array(
            "get" => array(
                "search" => 'server',
            ),
            "session" => $_SESSION,
            "sectionStyles" => array("red"),
        ));
        $controller = $this->object->controller();
        $this->assertArrayHasKey("template", $controller);
        $this->assertInternalType('string', $controller['template']);
        $this->assertEquals('search-results', $controller['template']);
        $this->assertArrayHasKey("context", $controller);
        $this->assertInternalType('array', $controller['context']);
        $this->assertInternalType('string', $controller['context']['pageTitle']);
        $this->assertNotEquals(0, strlen($controller['context']['pageTitle']), 'Empty page title');
        $this->assertNull($controller['context']['line']);
        $this->assertEquals(0, $controller['context']['offset']);
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerArticle()
    {
        $articleId = 179;
        $this->object = new Controller($this->myCms, array(
            "get" => array(
                "article" => '',
                "id" => $articleId,
            ),
            "session" => $_SESSION,
            "sectionStyles" => array("red"),
        ));
        $controller = $this->object->controller();
        $this->assertArrayHasKey("template", $controller);
        $this->assertInternalType('string', $controller['template']);
        $this->assertEquals('article', $controller['template']);
        $this->assertArrayHasKey("context", $controller);
        $this->assertInternalType('array', $controller['context']);
        $this->assertInternalType('array', $controller['context']['article']);
        $this->assertEquals($articleId, $controller['context']['article']['id']);
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerCategory()
    {
        $categoryId = 12;
        $this->object = new Controller($this->myCms, array(
            "get" => array(
                "category" => '',
                "id" => $categoryId,
            ),
            "session" => $_SESSION,
            "sectionStyles" => array("red"),
        ));
        $controller = $this->object->controller();
        $this->assertArrayHasKey("template", $controller);
        $this->assertInternalType('string', $controller['template']);
        $this->assertEquals('article', $controller['template']);
        $this->assertArrayHasKey("context", $controller);
        $this->assertInternalType('array', $controller['context']);
        $this->assertInternalType('array', $controller['context']['article']);
        $this->assertEquals($categoryId, $controller['context']['article']['category_id']);
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::controller
     */
    public function testControllerAbout()
    {
        $this->object = new Controller($this->myCms, array(
            "get" => array(
                "about" => '',
            ),
            "session" => $_SESSION,
            "sectionStyles" => array("red"),
        ));
        $controller = $this->object->controller();
        $this->assertArrayHasKey("template", $controller);
        $this->assertInternalType('string', $controller['template']);
        $this->assertEquals('home', $controller['template']);
        $this->assertArrayHasKey("context", $controller);
        $this->assertInternalType('array', $controller['context']);
        $this->assertInternalType('array', $controller['context']['items']);
        $this->assertEquals(6, count($controller['context']['items']));
    }

    /**
     * @covers GodsDev\MYCMSPROJECTNAME\Controller::getVars
     */
    public function testGetVars()
    {
        $this->myCms->context = array("1" => "2", "3" => "4", "c");
        $options = array(
            "get" => array("v1" => "getSth"),
            "session" => array("v1" => "getSth"),
            "sectionStyles" => array("red", "blue",),
        );
        $this->object = new Controller($this->myCms, $options);
        $this->assertEquals($options, $this->object->getVars());
    }

    public function testGetJsonField()
    {
        $this->object = new Controller($this->myCms);
        $this->assertNull($this->object->getJsonField("", ""), "Empty string is not json");
        $this->assertNull($this->object->getJsonField("cxx", "cxx"), "String is not json");
        $this->assertEquals("abc", $this->object->getJsonField('{"cxx":"abc"}', "cxx"), "Incorrect value of field");
        $this->assertNull($this->object->getJsonField('{"cxx":"abc"}', "abc"), "No such field");
        $this->assertNull($this->object->getJsonField('{"cxx":"abc}', "abc"), "Invalid JSON");
        $this->assertEquals("asc", $this->object->getJsonField('{"cxx":"abc","xyy":"asc"}', "xyy"), "Incorrect value of field 2");
        $this->assertEquals("asc,bbc,cnc", $this->object->getJsonField('{"cxx":"abc","xyy":"asc,bbc,cnc"}', "xyy"), "Incorrect value of field 3");
        $this->assertEquals(array("a", "b"), $this->object->getJsonField('{"cxx":"abc","xyy":["a","b"]}', "xyy"), "Incorrect array value of field");
        $this->assertEquals(array("a" => "c", "b" => "d"), $this->object->getJsonField('{"cxx":"abc","xyy":{"a":"c","b":"d"}}', "xyy"), "Incorrect array value of field 2");
    }

    public function testGetJsonFieldCommaDelimited()
    {
        $this->object = new Controller($this->myCms);
        $this->assertNull($this->object->getJsonFieldCommaDelimited("", ""), "Empty string is not json");
        $this->assertNull($this->object->getJsonFieldCommaDelimited("cxx", "cxx"), "String is not json");
        $this->assertEquals(["abc"], $this->object->getJsonFieldCommaDelimited('{"cxx":"abc"}', "cxx"), "Incorrect value of field");
        $this->assertNull($this->object->getJsonFieldCommaDelimited('{"cxx":"abc"}', "abc"), "No such field");
        $this->assertNull($this->object->getJsonFieldCommaDelimited('{"cxx":"abc}', "abc"), "Invalid JSON");
        $this->assertEquals(["asc"], $this->object->getJsonFieldCommaDelimited('{"cxx":"abc","xyy":"asc"}', "xyy"), "Incorrect value of field 2");
        $this->assertEquals(["asc", "bbc", "cnc"], $this->object->getJsonFieldCommaDelimited('{"cxx":"abc","xyy":"asc,bbc,cnc"}', "xyy"), "Incorrect value of field 3");
        $this->assertNull($this->object->getJsonFieldCommaDelimited('{"cxx":"abc","xyy":["a","b"]}', "xyy"), "Incorrect array value of field");
        $this->assertNull($this->object->getJsonFieldCommaDelimited('{"cxx":"abc","xyy":{"a":"c","b":"d"}}', "xyy"), "Incorrect array value of field 2");
    }

}
